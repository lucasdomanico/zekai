
# it is possible to use type annotations for globals and locals
@num
i 1

@str
s 2 # type error!

# primitive types besides num/numbers and str/strings are bool/booleans
@bool
b true

# to create an empty array, give it a type
array(num)
my_array
    v array(num)
    v.push(2)
    v.push('x') # type error!
    v

# similarly, you can create a map
map(str num)
my_map
    m map(str num)
    m.set('x' 1)
    m.set('y' 2)
    m

# zekai doesn't allow to create anonymous objects (besides struct constructors)
# if you need an anonymous for compatibility reasons with other code, you can use
# Object.fromEntries()
my_object
    m my_map()
    o Object.fromEntries(m)
    console.log(o)

# typescript union types
None
State
    value num
union(None State) void
my_union x
    if x instanceof None
        console.log('None')
    if x instanceof State
        console.log('State' x.value)

# typescript tuples
tuple(num str) void
my_tuple x
    console.log(x[0] x[1])

# there are also fun types
fun(num void) void
twice f
    f(1)
    f(2)

# to emulate classes/interfaces use a struct with closures
Class
    get_x fun(num)
    set_x fun(num void)

Class
new_class
    x 0
    Class(
        \\ x # lambda expression, explained later
        \n: x = n
    )

# to create a type alias, just start its id with upper case and a type
Foo Class

@Foo
foo new_class()

main
    console.log(my_array())
    console.log(my_map())
    my_object()
    my_union(None())
    my_union(State(7))
    my_tuple([1 'z'])
    n 0
    twice(\x: n += x)
    console.log(n)
    c new_class()
    c.set_x(9)
    console.log(c.get_x())
    console.log(foo)